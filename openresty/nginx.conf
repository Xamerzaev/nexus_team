worker_processes auto;
worker_rlimit_nofile 100000;
user www-data;
pcre_jit on;

# only log critical errors
#error_log logs/error.log crit;
error_log  logs/error.log  info;
#access_log  logs/access.log  main;
# Disable access log altogether.
#access_log off;
# Buffer log writes to speed up IO.
#access_log logs/access.log main buffer=16k;


events {
    worker_connections 10000;
    use epoll;
    multi_accept on;
}

http {
    include       mime.types;
    default_type  application/octet-stream;
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

        # Log in JSON Format
         log_format nginxlog_json escape=json '{ "timestamp": "$time_iso8601", '
         '"remote_addr": "$remote_addr", '
          '"body_bytes_sent": $body_bytes_sent, '
          '"request_time": $request_time, '
          '"response_status": $status, '
          '"request": "$request", '
          '"request_method": "$request_method", '
          '"host": "$host",'
          '"upstream_addr": "$upstream_addr",'
          '"http_x_forwarded_for": "$http_x_forwarded_for",'
          '"http_referrer": "$http_referer", '
          '"http_user_agent": "$http_user_agent", '
          '"http_version": "$server_protocol", '
          '"nginx_access": true }';
         access_log /dev/stdout nginxlog_json buffer=16k;

    # See Move default writable paths to a dedicated directory (#119)
    # https://github.com/openresty/docker-openresty/issues/119
    client_body_temp_path /var/run/openresty/nginx-client-body;
    proxy_temp_path       /var/run/openresty/nginx-proxy;
    fastcgi_temp_path     /var/run/openresty/nginx-fastcgi;
    uwsgi_temp_path       /var/run/openresty/nginx-uwsgi;
    scgi_temp_path        /var/run/openresty/nginx-scgi;

    variables_hash_max_size 1024;
    # cache informations about FDs, frequently accessed files
    # can boost performance, but you need to test those values
    open_file_cache max=200000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    # The "auto_ssl" shared dict should be defined with enough storage space to
    # hold your certificate data. 1MB of storage holds certificates for
    # approximately 100 separate domains.
    lua_shared_dict auto_ssl 2m;
    # The "auto_ssl_settings" shared dict is used to temporarily store various settings
    # like the secret used by the hook server on port 8999. Do not change or
    # omit it.
    lua_shared_dict auto_ssl_settings 64k;

    # A DNS resolver must be defined for OCSP stapling to function.
    #
    # This example uses Google's DNS server. You may want to use your system's
    # default DNS servers, which can be found in /etc/resolv.conf. If your network
    # is not IPv6 compatible, you may wish to disable IPv6 results by using the
    # "ipv6=off" flag (like "resolver 8.8.8.8 ipv6=off").
    resolver 8.8.8.8;
    
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    proxy_set_header Request-Id $request_id;
    add_header Request-Id $request_id;
    # Initial setup tasks.
    init_by_lua_block {
      auto_ssl = (require "resty.auto-ssl").new()
      auto_ssl:set("allow_domain", function(domain)
        return true
      end)

      auto_ssl:init()
    }

    init_worker_by_lua_block {
      auto_ssl:init_worker()
    }
    # to boost I/O on HDD we can disable access logs
    #access_log off;
    # copies data between one FD and other from within the kernel
    # faster than read() + write()
    sendfile on;

    # send headers in one piece, it is better than sending them one by one
    tcp_nopush on;

    # don't buffer data sent, good for small data bursts in real time
    tcp_nodelay on;

    # reduce the data that needs to be sent over network -- for testing environment
    gzip on;
    # gzip_static on;
    gzip_min_length 10240;
    gzip_comp_level 1;
    gzip_vary on;
    gzip_disable msie6;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types
        # text/html is always compressed by HttpGzipModule
        text/css
        text/javascript
        text/xml
        text/plain
        text/x-component
        application/javascript
        application/x-javascript
        application/json
        application/xml
        application/rss+xml
        application/atom+xml
        font/truetype
        font/opentype
        application/vnd.ms-fontobject
        image/svg+xml;

    # allow the server to close connection on non responding client, this will free up memory
    reset_timedout_connection on;
    keepalive_timeout 45;

    # number of requests client can make over keep-alive -- for testing environment
#    keepalive_requests 100000
    # request timed out -- default 60
#    client_body_timeout 10;

    # if client stop responding, free up memory -- default 60
#    send_timeout 2;
#    # request timed out -- default 60
#    client_body_timeout 10;
    ##
    # Basic Settings
    ##

###################legacy#######
    types_hash_max_size 2048;
    client_max_body_size 0;
    server_names_hash_max_size 5120;
    
    limit_conn_zone $binary_remote_addr zone=connections:10m;
    limit_conn_log_level info;
    limit_req_zone $binary_remote_addr zone=requests:10m rate=100r/m;
    limit_req_log_level info;

    # server_tokens off;

    server_names_hash_bucket_size 128;
    # server_name_in_redirect off;

    ##
    # SSL Settings
    ##

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE
    ssl_prefer_server_ciphers on;

    ##
    # Logging Settings
    ##

#    log_format analytics '$remote_addr - $upstream_cache_status [$time_local]  '
#                    '"$request" $status $body_bytes_sent $query_string'
#                    '"$http_referer" "$http_user_agent"'
#                    '"$geoip_country_name" "$geoip_country_code"';

    ##
    # Virtual Host Configs
    ##

#    geoip_country /etc/nginx/geoip/maxmind.dat;
    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*;

  # HTTPS server
  server {
    listen 443 ssl http2;

    # Dynamic handler for issuing or returning certs for SNI domains.
    ssl_certificate_by_lua_block {
      auto_ssl:ssl_certificate()
    }

    ssl_certificate /etc/ssl/resty-auto-ssl-fallback.crt;
    ssl_certificate_key /etc/ssl/resty-auto-ssl-fallback.key;

   # certs sent to the client in SERVER HELLO are concatenated in ssl_certificate
   ssl_session_timeout 1d;
   ssl_session_cache shared:SSL:50m;
   ssl_session_tickets off;

   # intermediate configuration. tweak to your needs.
   ssl_protocols TLSv1.2 TLSv1.3;
   ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
   ssl_prefer_server_ciphers on;

   # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
   # uncomment if you are sure you'll never drop HTTPS support
   # add_header Strict-Transport-Security max-age=15768000;    

#    location ~ /\.(?!well-known\/) {
#      deny all;
#    }
  }

  # HTTP server
  server {
    listen 80 default_server;

    location /health {
      access_log off;
      return 200 "UP\n";
    }

    location / {
      root   html;
      index  index.html index.htm;
    }

    # Endpoint used for performing domain verification with Let's Encrypt.
    location /.well-known/acme-challenge/ {
      auth_basic off;
      content_by_lua_block {
        auto_ssl:challenge_server()
      }
    }
#    location ~ /\.(?!well-known\/) {
#      deny all;
#    }
#    location /xmlrpc.php {
#       deny all;
#    }
  }

  # Internal server running on port 8999 for handling certificate tasks.
  server {
    listen 127.0.0.1:8999;

    # Increase the body buffer size, to ensure the internal POSTs can always
    # parse the full POST contents into memory.
    client_body_buffer_size 128k;
    client_max_body_size 128k;

    location / {
      content_by_lua_block {
        auto_ssl:hook_server()
      }
    }
  }

}

