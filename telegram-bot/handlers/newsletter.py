from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from keyboards import get_confirm_edit_keyboard, get_edit_choice_keyboard
from states import Newsletter
from utils import newsletter_send


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–º–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
async def newsletter_message(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–º—É —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    async with state.proxy() as data:
        data["subject"] = message.text
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    await Newsletter.next()
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã —Ä–∞—Å—Å—ã–ª–∫–∏
async def newsletter_change_subject(message: types.Message, state: FSMContext):
    # –ò–∑–º–µ–Ω—è–µ–º —Ç–µ–º—É —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é —Ç–µ–º—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    async with state.proxy() as data:
        data["subject"] = message.text
    await newsletter_confirm(message, state)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–º—ã –ø–∏—Å—å–º–∞
async def edit_subject(query: types.CallbackQuery, state: FSMContext):
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–º—ã —Ä–∞—Å—Å—ã–ª–∫–∏
    await Newsletter.subject.set()
    dispatcher = Dispatcher.get_current()
    bot = dispatcher.bot
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –Ω–æ–≤–æ–π —Ç–µ–º—ã –ø–∏—Å—å–º–∞
    await bot.send_message(query.from_user.id, "üì© –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ç–µ–º—É –ø–∏—Å—å–º–∞:")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–∏—Å—å–º–∞
async def edit_message(query: types.CallbackQuery, state: FSMContext):
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
    await Newsletter.message.set()
    dispatcher = Dispatcher.get_current()
    bot = dispatcher.bot
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –ø–∏—Å—å–º–∞
    await bot.send_message(query.from_user.id, "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞:")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
async def newsletter_confirm(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    async with state.proxy() as data:
        data["message"] = message.text
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö
    # –¥–µ–π—Å—Ç–≤–∏–π
    formatted_message = (
        f"üîπ <b>–¢–µ–º–∞:</b>\n"
        f"<i>{data['subject']}</i>\n\n\n"
        f"üî∏ <b>–¢–µ–∫—Å—Ç –†–∞—Å—Å—ã–ª–∫–∏:</b>\n"
        f"<i>{data['message']}</i>\n\n\n"
        f"<b>‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</b>\n"
        f"üëá <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>"
    )

    keyboard = get_confirm_edit_keyboard()
    await message.reply(formatted_message, reply_markup=keyboard, parse_mode="HTML")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
async def newsletter_edit(query: types.CallbackQuery, state: FSMContext):
    dispatcher = Dispatcher.get_current()
    bot = dispatcher.bot
    await Newsletter.editing.set()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–±–æ—Ä —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–º—ã –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞
    keyboard = get_edit_choice_keyboard()
    await bot.send_message(
        query.from_user.id, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å? ü§î", reply_markup=keyboard
    )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
async def confirm_callback(query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        subject = data["subject"]
        message_text = data["message"]

    successful_count, total_count = await newsletter_send(
        query.from_user.id, subject, message_text
    )
    await state.finish()

    dispatcher = Dispatcher.get_current()
    bot = dispatcher.bot

    if total_count == 0:
        response_message = "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞. –†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚ùå"
    elif successful_count == 0:
        response_message = "–†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚ùå"
    else:
        response_message = "–†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚úÖ"

    await bot.send_message(query.from_user.id, response_message)


async def cancel_newsletter(query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    dispatcher = Dispatcher.get_current()
    bot = dispatcher.bot
    await bot.send_message(query.from_user.id, "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚ùå")


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
def register_handlers(dp: Dispatcher):
    dp.register_message_handler(newsletter_message, state=Newsletter.subject)
    dp.register_message_handler(
        newsletter_change_subject,
        state=Newsletter.subject)
    dp.register_callback_query_handler(
        edit_subject,
        lambda query: query.data == "edit_subject",
        state=Newsletter.editing,
    )
    dp.register_callback_query_handler(
        edit_message,
        lambda query: query.data == "edit_message",
        state=Newsletter.editing,
    )
    dp.register_message_handler(newsletter_confirm, state=Newsletter.message)
    dp.register_callback_query_handler(
        newsletter_edit,
        lambda query: query.data == "edit",
        state=Newsletter.message)
    dp.register_callback_query_handler(
        confirm_callback,
        lambda query: query.data == "confirm",
        state=Newsletter.message,
    )
    dp.register_callback_query_handler(
        cancel_newsletter,
        lambda query: query.data == "exit",
        state=Newsletter.message)


